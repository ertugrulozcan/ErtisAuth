@using ErtisAuth.Hub.Extensions
@using ErtisAuth.Hub.Helpers
@using ErtisAuth.Core.Models.Roles
@using ErtisAuth.Hub.ViewModels.Roles
@model ErtisAuth.Hub.ViewModels.Roles.RoleViewModelBase

@{
	bool? isPermittedForRoleUpdate = null; 
	if (Model is RoleViewModel roleViewModel)
	{
		isPermittedForRoleUpdate = this.IsAuthorizedAction("roles", Rbac.CrudActionSegments.Update, new RbacSegment(roleViewModel.Id));	
	}
}

@Html.HiddenFor(x => x.Json, new { @id = "json_payload_input" })
					
<div class="card card-bordered mb-5 mb-xl-10">
	<div class="card-header">
		<div class="card-title">
			<div class="d-flex align-items-center position-relative my-1">
				<h4>Role Info</h4>
			</div>
		</div>
	</div>
	
	<div class="card-body">
		<div class="row">
			@if (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value)
			{
				<div class="col-lg-6">
					<label class="form-label required">Name</label>
					<input id="createRoleForm_NameInput" type="text" class="form-control" placeholder="Name" asp-for="Name" disabled>
					<span class="validation-error-span" asp-validation-for="Name"></span>
				</div>
				<div class="col-lg-6">
					<label class="form-label">Description</label>
					<input id="createRoleForm_DescriptionInput" type="text" class="form-control" placeholder="Description" asp-for="Description" disabled>
					<span class="validation-error-span" asp-validation-for="Description"></span>
				</div>
			}
			else
			{
				<div class="col-lg-6">
					<label class="form-label required">Name</label>
					<input id="createRoleForm_NameInput" type="text" class="form-control" placeholder="Name" asp-for="Name">
					<span class="validation-error-span" asp-validation-for="Name"></span>
				</div>
				<div class="col-lg-6">
					<label class="form-label">Description</label>
					<input id="createRoleForm_DescriptionInput" type="text" class="form-control" placeholder="Description" asp-for="Description">
					<span class="validation-error-span" asp-validation-for="Description"></span>
				</div>	
			}
		</div>
	</div>
</div>

<div class="card card-bordered mb-5 mb-xl-10">
	<div class="card-header">
		<ul class="nav nav-tabs nav-line-tabs nav-stretch fs-6 border-0">
			<li class="nav-item">
				<a class="nav-link active" data-bs-toggle="tab" href="#basic_roles_tab">Basic</a>
			</li>
			<li class="nav-item">
				<a class="nav-link" data-bs-toggle="tab" href="#advanced_roles_tab">Advanced</a>
			</li>
		</ul>
	</div>
	
	<div class="card-body p-1">
		<div class="tab-content">
			<div class="tab-pane fade show active px-7 py-6" id="basic_roles_tab" role="tabpanel">
				<div>
					<div>
						@if (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value)
						{
							<div class="alert alert-dismissible bg-light-warning border border-warning border-dashed d-flex flex-column flex-sm-row w-100 p-5 mb-10">
								<span class="svg-icon svg-icon-2hx svg-icon-primary me-4 mb-5 mb-sm-0">
									@Html.Raw(SvgIcons.Warning)
								</span>

								<div class="d-flex flex-column pe-0 pe-sm-10">
									<h5 class="mb-1">Authorization Required</h5>
									<span>You do not have sufficient permissions to edit/update permission settings. You must have to <strong>roles.update</strong> permission.</span>
								</div>

								<button type="button" class="position-absolute position-sm-relative m-2 m-sm-0 top-0 end-0 btn btn-icon ms-sm-auto" data-bs-dismiss="alert">
									<i class="bi bi-x fs-1 text-primary"></i>
								</button>
							</div>
						}
						else
						{
							<div class="alert alert-dismissible bg-light-primary border border-primary border-dashed d-flex flex-column flex-sm-row w-100 p-5 mb-10">
								<span class="svg-icon svg-icon-2hx svg-icon-primary me-4 mb-5 mb-sm-0">
									@Html.Raw(SvgIcons.Info)
								</span>

								<div class="d-flex flex-column pe-0 pe-sm-10">
									<h5 class="mb-1">Info</h5>
									<span>Only permissions covering all users and all resources can be managed from this panel. Please check the advanced tab for the forbidden list and the user-based & resource-based options.</span>
								</div>

								<button type="button" class="position-absolute position-sm-relative m-2 m-sm-0 top-0 end-0 btn btn-icon ms-sm-auto" data-bs-dismiss="alert">
									<i class="bi bi-x fs-1 text-primary"></i>
								</button>
							</div>	
						}

						<table id="basicRoleManagementTable" class="table table-rounded table-striped table-hover border gy-7 gs-7">
							<thead>
							<tr>
								<th>#</th>
								<th>Create</th>
								<th>Read</th>
								<th>Update</th>
								<th>Delete</th>
							</tr>
							</thead>
							<tbody>
							@if (Model.PermissionsForBasicTab != null)
							{
								var disabledAttribute = (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value) ? " disabled" : string.Empty;
								
								foreach (var (resource, rbacSegments) in Model.PermissionsForBasicTab)
								{
									var title = resource.Value.Capitalize();

									<tr data-rbac-resource="@resource.Value">
										<th scope="row" style="vertical-align: middle;">@title</th>
										@{
											var toggleAttributes = new string[4]
											{
												$" data-rbac=*.{resource.Value}.create.*",
												$" data-rbac=*.{resource.Value}.read.*",
												$" data-rbac=*.{resource.Value}.update.*",
												$" data-rbac=*.{resource.Value}.delete.*",
											};

											const string checkedToggleAttributeValue = " checked=checked value=1";
											if (rbacSegments.Any(x => x.Action.Slug == Rbac.CrudActionSegments.Create.Slug))
											{
												toggleAttributes[0] += checkedToggleAttributeValue;
											}

											if (rbacSegments.Any(x => x.Action.Slug == Rbac.CrudActionSegments.Read.Slug))
											{
												toggleAttributes[1] += checkedToggleAttributeValue;
											}

											if (rbacSegments.Any(x => x.Action.Slug == Rbac.CrudActionSegments.Update.Slug))
											{
												toggleAttributes[2] += checkedToggleAttributeValue;
											}

											if (rbacSegments.Any(x => x.Action.Slug == Rbac.CrudActionSegments.Delete.Slug))
											{
												toggleAttributes[3] += checkedToggleAttributeValue;
											}
										}

										@foreach (var toggleAttribute in toggleAttributes)
										{
											<td>
												<div class="form-check form-switch form-check-custom form-check-solid me-10">
													<input class="form-check-input h-20px w-30px role-switch" type="checkbox" @toggleAttribute @disabledAttribute />
												</div>
											</td>
										}
									</tr>
								}
							}
							</tbody>
						</table>
					</div>
				</div>
			</div>
        
			<div class="tab-pane fade p-4" id="advanced_roles_tab" role="tabpanel">
				<style>
					.rbac-table {
						border-bottom: 1px solid #eff2f5!important;
					}
				
					.rbac-table>thead>tr>th {
						padding: 1.1em 0.9em !important;
						font-weight: 600;
						border-right: 1px solid #eff2f5!important;
					}
					
					.rbac-table>thead>tr>th:last-child {
						width: 40px;
						border-right: none !important;
					}
					
					.rbac-table>tbody>tr {
						border-top: 1px solid #eff2f5!important;
					}
					
					.rbac-table>tbody>tr>td {
						border-right: 1px solid #eff2f5!important;
					}
					
					.rbac-table>tbody>tr>td:first-child {
						padding-left: 1.1em !important;
					}
					
					.rbac-table>tbody>tr>td:last-child {
						padding: 8px !important;
						width: 40px;
						border-right: none !important;
					}
					
					.soft-border {
						border: 1px solid #eff2f5!important;
					}
				</style>
				
				@{
	                var contentEditableAttributeValue = "true";
	                var deleteButtonDisabledAttribute = string.Empty;

					if (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value)
					{
						contentEditableAttributeValue = "false";
						deleteButtonDisabledAttribute = " disabled";
						
						<div class="alert alert-dismissible bg-light-warning border border-warning border-dashed d-flex flex-column flex-sm-row w-100 p-5 mb-10">
							<span class="svg-icon svg-icon-2hx svg-icon-primary me-4 mb-5 mb-sm-0">
								@Html.Raw(SvgIcons.Warning)
							</span>

							<div class="d-flex flex-column pe-0 pe-sm-10">
								<h5 class="mb-1">Authorization Required</h5>
								<span>You do not have sufficient permissions to edit/update permission settings. You must have to <strong>roles.update</strong> permission.</span>
							</div>

							<button type="button" class="position-absolute position-sm-relative m-2 m-sm-0 top-0 end-0 btn btn-icon ms-sm-auto" data-bs-dismiss="alert">
								<i class="bi bi-x fs-1 text-primary"></i>
							</button>
						</div>
					}
                }
				
				<div class="row m-0 soft-border">
					<div class="col-md-6 px-0 border-right-solid-1-gray-200">
						<div id="permissionsPortlet" class="card non-box-shadow">
							<div class="card-header px-4">
								<div class="card-title">
									<div class="d-flex align-items-center position-relative my-1">
										<h6>Permissions</h6>
									</div>
								</div>

								<div class="card-toolbar">
									@if (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value)
									{
										<button type="button" class="btn btn-icon-sm btn-light btn-active-primary table-add" disabled>
											<i class="fas fa-plus fs-6"></i>
										</button>
									}
									else
									{
										<button type="button" class="btn btn-icon-sm btn-light btn-active-primary table-add" onClick="addPermission()">
											<i class="fas fa-plus fs-6"></i>
										</button>	
									}
								</div>
							</div>

							<div class="card-body p-0">
								<table id="permissionsTable" class="table table-bordered table-hover table-checkable rbac-table">
									<thead>
									<tr>
										<th>Subject</th>
										<th>Resource</th>
										<th>Action</th>
										<th>Object</th>
										<th class="fit-content"></th>
									</tr>
									</thead>
									<tbody>
									@if (Model.Permissions != null)
									{
										foreach (var permissionRbac in Model.Permissions)
										{
											<tr data-rbac="@permissionRbac.ToString()">
												<td contenteditable="@contentEditableAttributeValue">@permissionRbac.Subject</td>
												<td contenteditable="@contentEditableAttributeValue">@permissionRbac.Resource</td>
												<td contenteditable="@contentEditableAttributeValue">@permissionRbac.Action</td>
												<td contenteditable="@contentEditableAttributeValue">@permissionRbac.Object</td>
												<td>
													<button type="button" class="btn btn-icon-xsm btn-light-danger rbac-remove-button" @deleteButtonDisabledAttribute>
														<i class="fas fa-times fs-6"></i>
													</button>
												</td>
											</tr>
										}
									}
									</tbody>
								</table>
							</div>
						</div>
					</div>

					<div class="col-md-6 px-0">
						<div id="forbiddenPortlet" class="card non-box-shadow">
							<div class="card-header px-4">
								<div class="card-title">
									<div class="d-flex align-items-center position-relative my-1">
										<h6>Forbidden</h6>
									</div>
								</div>

								<div class="card-toolbar">
									@if (isPermittedForRoleUpdate != null && !isPermittedForRoleUpdate.Value)
                                    {
	                                    <button type="button" class="btn btn-icon-sm btn-light btn-active-primary table-add" disabled>
		                                    <i class="fas fa-plus fs-6"></i>
	                                    </button>
                                    }
                                    else
                                    {
	                                    <button type="button" class="btn btn-icon-sm btn-light btn-active-primary table-add" onClick="addForbidden()">
		                                    <i class="fas fa-plus fs-6"></i>
	                                    </button>	
                                    }
								</div>
							</div>
							
							<div class="card-body p-0">
								<table id="forbiddenTable" class="table table-bordered table-hover table-checkable rbac-table">
									<thead>
									<tr>
										<th>Subject</th>
										<th>Resource</th>
										<th>Action</th>
										<th>Object</th>
										<th class="fit-content"></th>
									</tr>
									</thead>
									<tbody>
									@if (Model.Forbidden != null)
									{
										foreach (var forbiddenRbac in Model.Forbidden)
										{
											<tr data-rbac="@forbiddenRbac.ToString()">
												<td contenteditable="@contentEditableAttributeValue">@forbiddenRbac.Subject</td>
												<td contenteditable="@contentEditableAttributeValue">@forbiddenRbac.Resource</td>
												<td contenteditable="@contentEditableAttributeValue">@forbiddenRbac.Action</td>
												<td contenteditable="@contentEditableAttributeValue">@forbiddenRbac.Object</td>
												<td>
													<button type="button" class="btn btn-icon-xsm btn-light-danger rbac-remove-button" @deleteButtonDisabledAttribute>
														<i class="fas fa-times fs-6"></i>
													</button>
												</td>
											</tr>
										}
									}
									</tbody>
								</table>
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</div>
</div>