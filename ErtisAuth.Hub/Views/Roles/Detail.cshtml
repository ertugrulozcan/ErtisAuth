@using ErtisAuth.Hub.Helpers
@using ErtisAuth.Core.Models.Identity
@using ErtisAuth.Core.Models.Roles
@using ErtisAuth.Sdk.Services.Interfaces
@using ErtisAuth.Hub.Constants
@using ErtisAuth.Hub.Extensions
@using ErtisAuth.Hub.ViewModels
@model ErtisAuth.Hub.ViewModels.Roles.RoleViewModel

@{
    ViewData["Title"] = "Roles";
}

@inject IRoleService roleService;

@functions
{
    bool IsPermittedFor(string roleId, string resource, Rbac.CrudActions action)
    {
        if (!string.IsNullOrEmpty(roleId) && !string.IsNullOrEmpty(resource))
        {
            var userId = this.Context.GetClaim(Claims.UserId);
            var accessToken = this.Context.GetClaim(Claims.AccessToken);

            if (!string.IsNullOrEmpty(userId) && !string.IsNullOrEmpty(accessToken))
            {
                var rbac = new Rbac(new RbacSegment(userId), new RbacSegment(resource), Rbac.GetSegment(action), RbacSegment.All);
                return this.roleService.CheckPermissionByRole(roleId, rbac.ToString(), BearerToken.CreateTemp(accessToken));
            }
        }

        return false;
    }
    
    bool IsPermittedForImportantAccesses(string roleId, out IEnumerable<string> missingPermissions)
    {
        var missingPermissionsList = new List<string>();
        
        var isPermittedForRolesRead = IsPermittedFor(roleId, "roles", Rbac.CrudActions.Read);
        if (!isPermittedForRolesRead)
        {
            missingPermissionsList.Add("roles.read");
        }
        
        var isPermittedForTokensRead = IsPermittedFor(roleId, "tokens", Rbac.CrudActions.Read);
        if (!isPermittedForTokensRead)
        {
            missingPermissionsList.Add("tokens.read");
        }
        
        var isPermittedForTokensCreate = IsPermittedFor(roleId, "tokens", Rbac.CrudActions.Create);
        if (!isPermittedForTokensCreate)
        {
            missingPermissionsList.Add("tokens.create");
        }

        missingPermissions = missingPermissionsList;
        return isPermittedForRolesRead && isPermittedForTokensRead && isPermittedForTokensCreate;
    }
}

<div class="toolbar" id="kt_toolbar">
    <div id="kt_toolbar_container" class="container-fluid d-flex flex-stack">
        <div data-kt-swapper="true" data-kt-swapper-mode="prepend" data-kt-swapper-parent="{default: '#kt_content_container', 'lg': '#kt_toolbar_container'}" class="page-title d-flex align-items-center flex-wrap me-3 mb-5 mb-lg-0">
            <h1 class="d-flex align-items-center text-dark fw-bolder fs-3 my-1">Role Details</h1>
            <span class="h-20px border-gray-200 border-start mx-4"></span>
            
            @{
                var breadcrumb = BreadcrumbBuilder
                    .Add("Home", "Index", "Home")
                    .Add("Roles", "Index", "Roles")
                    .Add(Model.Id, "Detail", "Roles", new { id = Model.Id });
            }
            
            <partial name="Partials/_Breadcrumb" model="@breadcrumb"/>
        </div>
		
        <div class="d-flex align-items-center py-1">
            <partial name="Partials/_AuthorizedButton" model="@AuthorizedButton.SaveButton("UpdateRoleForm", "roles", Model.Id)" />
        </div>
    </div>
</div>

<div class="post d-flex flex-column-fluid" id="kt_post">
	<div id="kt_content_container" class="container-fluid">
        <partial name="Partials/_AlertBox" model="Model" />
        @if (!IsPermittedForImportantAccesses(Model.Id, out var missingPermissions))
        {
            <div class="alert alert-warning d-flex align-items-center p-5 mb-10">
                <span class="svg-icon svg-icon-2hx svg-icon-warning me-4">
                    @Html.Raw(SvgIcons.Warning)
                </span>
                
                <div class="d-flex flex-column">
                    <h4 class="mb-1 text-dark">Warning</h4>
                    <span>This role is not authorized for "@string.Join(", ", missingPermissions)" permission or permissions. This may cause some access problems on some pages or actions.</span>
                </div>
            </div>
        }
		
        <div class="d-flex flex-column flex-lg-row">
            <div class="flex-lg-row-fluid me-10">
                <form id="UpdateRoleForm" method="post" asp-controller="Roles" asp-action="Update">
                    @Html.HiddenFor(x => x.Id)

                    <partial name="_RoleEditPanel"/>
                </form>
            </div>

            <div class="flex-column flex-lg-row-auto w-lg-300px w-xl-400px">
                <partial name="Partials/_ResourceDetailsCard" />
            </div>
        </div>
	</div>
</div>