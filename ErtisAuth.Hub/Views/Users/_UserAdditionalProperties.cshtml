@using ErtisAuth.Hub.Helpers
@using Ertis.CMS.Core.Models.Contents
@using Ertis.CMS.Dynamics.Extensions
@model ErtisAuth.Hub.ViewModels.Users.IHasUserTypeUserViewModel

@{
    IDictionary<string, object> additionalPropertiesDictionary = new Dictionary<string, object>();
    var userTypeFieldList = new List<dynamic>();
    if (Model.UserType != null && Model.UserType.Properties != null)
    {
	    if (Model.AdditionalProperties != null)
	    {
		    additionalPropertiesDictionary = (Model.AdditionalProperties as object).ToDictionary();    
	    }
	    
        var userTypePropertiesDictionary = (Model.UserType.Properties as object).ToDictionary();
        foreach (var (propertyName, propertySchema) in userTypePropertiesDictionary)
        {
            if (propertySchema is IDictionary<string, object> propertySchemaDictionary)
            {
                if (propertySchemaDictionary.ContainsKey("type"))
                {
                    var propertyTypeName = propertySchemaDictionary["type"].ToString();
                    var displayName = propertyName;
                    if (propertySchemaDictionary.ContainsKey("title") && !string.IsNullOrEmpty(propertySchemaDictionary["title"]?.ToString()))
                    {
                        displayName = propertySchemaDictionary["title"].ToString();
                    }

                    var propertyDescription = string.Empty;
                    if (propertySchemaDictionary.ContainsKey("description") && !string.IsNullOrEmpty(propertySchemaDictionary["description"]?.ToString()))
                    {
                        propertyDescription = propertySchemaDictionary["description"].ToString();
                    }

                    var fieldPayload = new
                    {
                        name = propertyName,
                        type = propertyTypeName,
                        title = displayName,
                        description = propertyDescription,
                        required = Model.UserType.RequiredFields != null && Model.UserType.RequiredFields.Contains(propertyName)
                    };
                
                    userTypeFieldList.Add(fieldPayload);
                    
                    if (additionalPropertiesDictionary.ContainsKey(propertyName))
                    {
                        additionalPropertiesDictionary[propertyName] = UserTypeHelper.EnsurePropertyValue(propertyTypeName, additionalPropertiesDictionary[propertyName]);
                    }
                    else
                    {
                        additionalPropertiesDictionary[propertyName] = UserTypeHelper.GetPropertyDefaultValue(propertyTypeName);
                    }
                }
                else
                {
                    // Property type is undetermined !
                }
            }
        }
    }
}

@if (Model.UserType != null && Model.UserType.Properties != null)
{
	foreach (var userTypeField in userTypeFieldList)
	{
		var expandoObject = ((object) userTypeField).ToExpandoObject();
		object value = additionalPropertiesDictionary?[userTypeField.name];
		var field = CustomTypeField.Create(expandoObject, value);
		
		<div class="row mb-6">
			<div class="col-lg-2 col-xl-3">
				@if (field.IsRequired)
				{
					<label class="col-form-label required fw-bold fs-6">@field.Title</label>
				}
				else
				{
					<label class="col-form-label fw-bold fs-6">@field.Title</label>
				}
	                                    
				@if (!string.IsNullOrEmpty(field.Description))
				{
					<span data-bs-toggle="popover" data-bs-trigger="hover focus" data-bs-content="@field.Description">
						<i class="fas fa-exclamation-circle ms-2 fs-7 text-info"></i>
					</span>
				}
			</div>
                                                        
			<div class="col-lg-10 col-xl-9">
				@switch (field.Type)
				{
					case FieldType.@string:
						<partial name="Partials/Components/_StringComponent" model="@field" />
						break;
					case FieldType.email:
						<partial name="Partials/Components/_EmailAddressComponent" model="@field" />
						break;
					case FieldType.boolean:
						<partial name="Partials/Components/_BooleanComponent" model="@field" />
						break;
					case FieldType.number:
					case FieldType.integer:
					case FieldType.@null:
					case FieldType.array:
					case FieldType.@object:
					case FieldType.longtext:
					case FieldType.richtext:
					case FieldType.date:
					case FieldType.datetime:
					case FieldType.hostname:
					case FieldType.uri:
					case FieldType.color:
					case FieldType.location:
					case FieldType.json_object:
					case FieldType.single_reference:
					case FieldType.multiple_reference:
						<partial name="Partials/Components/_UnsupportedFieldTypeComponent" model="@field" />
						break;
					default:
						throw new ArgumentOutOfRangeException();
				}
			</div>
		</div>
	}
}